mod ident;
mod op;

pub use ident::*;
pub use op::*;

#[derive(Debug, Clone, PartialEq)]
pub enum Token {
    // Single-character tokens.
    LeftParen,
    RightParen,
    LeftBrace,
    RightBrace,
    RightBracket,
    LeftBracket,
    Comma,
    Assign,
    Dot,
    Range,
    Minus,
    Plus,
    Multiply,
    Divide,
    MinusEqual,
    PlusEqual,
    Colon,
    Semicolon,
    Newline,
    // One or two character tokens.
    Bang,
    BangEqual,
    EqualEqual,
    Greater,
    GreaterEqual,
    Less,
    LessEqual,
    // Literals.
    Ident(Ident),
    String(String),
    Number(i64),
    Float(f64),
    // Keywords.
    And,
    BoleanAnd,
    Struct,
    Else,
    False,
    For,
    If,
    Return,
    Break,
    Continue,
    Or,
    BooleanOr,
    True,
    While,
    Fn,
    Let,
}

impl std::fmt::Display for Token {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Token::LeftParen => write!(f, "("),
            Token::RightParen => write!(f, ")"),
            Token::LeftBrace => write!(f, "{{"),
            Token::RightBrace => write!(f, "}}"),
            Token::LeftBracket => write!(f, "["),
            Token::RightBracket => write!(f, "]"),
            Token::Comma => write!(f, ","),
            Token::Assign => write!(f, "="),
            Token::Dot => write!(f, "."),
            Token::Range => write!(f, ".."),
            Token::Minus => write!(f, "-"),
            Token::Plus => write!(f, "+"),
            Token::Multiply => write!(f, "*"),
            Token::Divide => write!(f, "/"),
            Token::MinusEqual => write!(f, "-="),
            Token::PlusEqual => write!(f, "+="),
            Token::Colon => write!(f, ":"),
            Token::Semicolon => write!(f, ";"),
            Token::Newline => write!(f, "\\n"),
            Token::Bang => write!(f, "!"),
            Token::BangEqual => write!(f, "!="),
            Token::EqualEqual => write!(f, "=="),
            Token::Greater => write!(f, ">"),
            Token::GreaterEqual => write!(f, ">="),
            Token::Less => write!(f, "<"),
            Token::LessEqual => write!(f, "<="),
            Token::Ident(s) => write!(f, "{s}"),
            Token::String(s) => write!(f, "\"{s}\""),
            Token::Number(n) => write!(f, "{n}"),
            Token::Float(n) => write!(f, "{n}"),
            Token::And => write!(f, "and"),
            Token::BoleanAnd => write!(f, "&&"),
            Token::Struct => write!(f, "struct"),
            Token::Else => write!(f, "else"),
            Token::False => write!(f, "false"),
            Token::For => write!(f, "for"),
            Token::If => write!(f, "if"),
            Token::Return => write!(f, "return"),
            Token::Break => write!(f, "break"),
            Token::Continue => write!(f, "continue"),
            Token::Or => write!(f, "or"),
            Token::BooleanOr => write!(f, "||"),
            Token::True => write!(f, "true"),
            Token::While => write!(f, "while"),
            Token::Fn => write!(f, "fn"),
            Token::Let => write!(f, "let"),
        }
    }
}
